import curses
from curses import textpad
import sys

#GRUPO
#Emanuel Gomes da Silva Andrade
#Ana Beatriz Soares Neves
#Beatriz de Melo Ferraz Silva
#Guilherme CÃ¢ndido Mayrink


#### POPUP ####
def game_over(win):
    win.clear()
    curses.init_pair(1, curses.COLOR_RED, curses.COLOR_BLACK)
    RED_AND_BLACK = curses.color_pair(1)

    gameOver = "GAME OVER!!"
    y,x = win.getmaxyx()

    y= y//2
    x = x//2-len(gameOver)
    i = 5
    while i < 10:
        win.refresh()

        win.addstr(y,x, gameOver)

        win.refresh()
        curses.napms(1000)

        win.attron(RED_AND_BLACK)
        win.addstr(y,x, gameOver)
        win.attroff(RED_AND_BLACK)

        win.refresh()
        curses.napms(1000)
        i += 1


def you_won(win):
    win.clear()
    curses.curs_set(0)
    curses.resize_term(35,135)

    curses.init_pair(1, curses.COLOR_GREEN, curses.COLOR_BLACK)
    GREEN_AND_BLACK = curses.color_pair(1)

    youWon = "YOU WON!!"
    y,x = win.getmaxyx()

    y= y//2
    x = x//2-len(youWon)

    i = 5
    while i < 10:

        win.refresh()

        win.addstr(y,x, youWon)

        win.refresh()
        curses.napms(1000)

        win.attron(GREEN_AND_BLACK)
        win.addstr(y,x, youWon)
        win.attroff(GREEN_AND_BLACK)

        win.refresh()
        curses.napms(1000)
        i += 1
###############

#### SPLASH-SCREEN ############

def splash_screen(stdscr):
    stdscr.clear()
    curses.curs_set(0)
    if curses.has_colors():
     curses.use_default_colors()
    if curses.can_change_color():
       curses.init_color(
          255,
          0x1c * 1000 // 0xff,
          0x1c * 1000 // 0xff,
          0x1c * 1000 // 0xff
       )

    curses.curs_set(0)
    stdscr.clear()
    
    curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_WHITE)
    WHITE = curses.color_pair(1)

    # medindo o tamanho total do terminal
    alturaDaTela, comprimentoDaTela = stdscr.getmaxyx()

    # array com o texto
    texto = [
                                                                                            
        [' ',' ',' ',' ',' ','*','*','*','*','*',' ','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*','*','*',' ','*',' ',' ',' ',' ','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*','*','*',' ','*','*',' ',' ',' ',' '],
        [' ',' ','*','*','*','*','*','*',' ',' ','*',' ','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ','*','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ','*','*','*','*',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*','*','*','*',' ',' ','*',' ',' ','*','*','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*','*','*','*',' ',' ','*','*','*','*',' ','*',' '],
        [' ','*','*',' ',' ',' ','*',' ',' ','*',' ',' ','*','*',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ','*',' ',' ','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ','*',' ',' ','*','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ',' ',' ','*',' ',' ','*',' ',' ',' ',' ',' ','*','*','*','*','*',' ',' ',' ',' ',' ','*','*',' ',' ',' ','*',' ',' ','*',' ','*','*','*','*',' ',' '],
        ['*',' ',' ',' ',' ','*',' ',' ','*',' ',' ',' ','*','*',' ',' ',' ',' ',' ',' ',' ','*',' ',' ','*','*',' ',' ',' ','*','*','*',' ',' ',' ',' ',' ',' ',' ','*',' ',' ','*','*',' ',' ',' ','*','*',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ',' ',' ','*',' ',' ','*','*',' ',' ',' ',' ',' ','*',' ','*','*',' ',' ',' ',' ',' ','*',' ',' ',' ',' ','*',' ',' ','*',' ',' ',' ','*','*',' ',' ',' '],
        [' ',' ',' ',' ','*',' ',' ','*',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ','*',' ',' ','*','*','*',' ',' ',' ',' ','*','*','*',' ',' ',' ',' ',' ','*',' ',' ','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ','*','*','*',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' '],
        [' ',' ',' ','*','*',' ','*','*',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ',' ',' ',' ',' ','*','*',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' '],
        [' ',' ',' ','*','*',' ','*','*',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ',' ',' ',' ',' ','*','*',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ',' ',' ','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' '],
        [' ',' ',' ','*','*',' ','*','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ',' ',' ',' ',' ','*','*',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ',' ','*','*','*','*',' ',' ','*',' ',' ',' ',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ','*','*','*','*','*','*',' ',' ',' ',' ',' '],
        [' ',' ',' ','*','*',' ','*','*',' ',' ','*','*','*',' ',' ',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ',' ',' ',' ',' ','*','*',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ','*',' ',' ','*','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ','*','*','*','*','*',' ',' ',' ',' ',' ',' '],
        [' ',' ',' ','*','*',' ','*','*',' ',' ',' ',' ','*','*',' ',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ',' ',' ',' ',' ','*','*',' ',' ',' ',' ','*','*',' ',' ',' ','*','*','*',' ',' ',' ',' ','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ',' ',' ','*','*',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' '],
        [' ',' ',' ','*',' ',' ','*','*',' ',' ',' ',' ','*','*',' ',' ',' ',' ',' ',' ','*','*',' ',' ','*','*',' ',' ',' ',' ',' ','*','*',' ',' ',' ',' ',' ','*','*',' ',' ','*','*',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ',' ','*','*',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' '],
        [' ',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ','*','*',' ',' ',' ',' ',' ',' ',' ','*','*',' ','*',' ',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ','*','*',' ','*',' ',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ','*',' ',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
        [' ',' ','*','*','*','*',' ',' ',' ',' ',' ',' ','*','*','*',' ',' ',' ',' ',' ',' ',' ','*','*','*',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*',' ',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' '],
        [' ','*',' ',' ','*','*','*','*',' ',' ',' ',' ','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*','*','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*','*','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*','*','*','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ','*','*','*','*','*','*','*','*','*','*','*',' ',' '],
        ['*',' ',' ',' ',' ','*','*',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ','*','*','*','*','*','*',' ',' ',' ',' ',' '],
        ['*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
        [' ','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
    ]
    sword_splash_screen(stdscr)
    for i in range(len(texto)):

        for j in range(len(texto[i])):
            alturaDaArray = len(texto)
            comprimentoDaArray = len(texto[i])
            y = (alturaDaTela - alturaDaArray) // 2
            x = (comprimentoDaTela - comprimentoDaArray) // 2

            y = y+i
            x = x+j

            if texto[i][j]=="*":

                curses.napms(10)
                stdscr.attron(WHITE)
                stdscr.addstr(y,x,texto[i][j])
                stdscr.attroff(WHITE)
            else: 
                pass
            stdscr.refresh()

def sword_splash_screen(stdscr):
    if curses.has_colors():
     curses.use_default_colors()
    if curses.can_change_color():
       curses.init_color(
          255,
          0x1c * 1000 // 0xff,
          0x1c * 1000 // 0xff,
          0x1c * 1000 // 0xff
       )
    curses.init_pair(2,241,241)
    COR1 = curses.color_pair(2)
    curses.init_pair(3,240,240)
    COR2 = curses.color_pair(3)
    curses.init_pair(4,239,239)
    COR3 = curses.color_pair(4)
    curses.init_pair(5,238,238)
    COR4 = curses.color_pair(5)
    curses.init_pair(6, 237, 237)
    COR5 = curses.color_pair(6)
    curses.init_pair(7, 236,236)
    COR6 = curses.color_pair(7)
    

    alturaDaTela, comprimentoDaTela = stdscr.getmaxyx()
    arma = [


        [' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','>','>','X','X','X','?','?','?','X','X','X','X',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],




        [' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','?','?','X','X','?','=','X','X','=','^',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '], 



















    ]

    for i in range(len(arma)):

        for j in range(len(arma[i])):
            alturaDaArray = len(arma)
            comprimentoDaArray = len(arma[i])
            y = (alturaDaTela - alturaDaArray) // 2
            x = (comprimentoDaTela - comprimentoDaArray) // 2

            y = y+i
            x = x+j

            
            
            if arma[i][j] == "X" or arma[i][j] == "$":
                stdscr.addstr(y,x,arma[i][j], COR6)
            else:
                pass
            if arma[i][j] == "?":
                stdscr.addstr(y,x,arma[i][j], COR2)
            else:
                pass
            if arma[i][j] == "#":
                stdscr.addstr(y,x,arma[i][j], COR5)
            else:
                pass
            if arma[i][j] == "^":
                stdscr.addstr(y,x,arma[i][j], COR4)
            else:
                pass
            if arma[i][j] == "=":
                stdscr.addstr(y,x,arma[i][j], COR3)
            else:
                pass
            if arma[i][j] == ">":
                stdscr.addstr(y,x,arma[i][j], COR1)
            else:
                pass
        stdscr.refresh()

#### MENU #####

def print_menu(stdscr, selected_opcoes_idx):
    menu = ['facil','dificil', 'sair']   

    stdscr.clear()

    #stdscr.addstr(0, 0, "start of print menu, idx =" + str(selected_opcoes_idx))
    #curses.napms(1000)
    curses.init_pair(1, curses.COLOR_BLACK, curses.COLOR_WHITE)
    BLACK_AND_WHITE = curses.color_pair(1)
   
    h, w = stdscr.getmaxyx()

    for idx, opcoes in enumerate(menu):
        x = w//2 - len(opcoes)//2
        y = h//2 - len(menu)//2 + idx
        if idx == selected_opcoes_idx:
            stdscr.attron(BLACK_AND_WHITE)
            stdscr.addstr(y, x, opcoes)
            stdscr.attroff(BLACK_AND_WHITE)
        else: 
            stdscr.addstr(y, x, opcoes)

    stdscr.refresh()

def menu(stdscr):

    menu = ['facil','dificil', 'sair']

    opcaoAtual_opcoes_idx = 0
    
    key = 0
    while 1: 
        print_menu(stdscr, opcaoAtual_opcoes_idx)
        key = stdscr.getch()

        stdscr.clear()

        if key == curses.KEY_UP and opcaoAtual_opcoes_idx > 0:
            opcaoAtual_opcoes_idx -= 1
        elif key == curses.KEY_DOWN and opcaoAtual_opcoes_idx < len(menu)-1:
            opcaoAtual_opcoes_idx += 1
        elif key == curses.KEY_ENTER or key in [10, 13]:
            if opcaoAtual_opcoes_idx == len(menu)-1:
                break

        print_menu(stdscr, opcaoAtual_opcoes_idx)

        stdscr.refresh()
    

def print_menu_cores(stdscr, selected_opcoes_idx):
    menu = ['branco e cinza', 'ciano e lilÃ¡s']    

    stdscr.clear()

    curses.init_pair(1, curses.COLOR_BLACK, curses.COLOR_WHITE)
    BLACK_AND_WHITE = curses.color_pair(1)
   
    h, w = stdscr.getmaxyx()

    for idx, opcoes in enumerate(menu):
        x = w//2 - len(opcoes)//2
        y = h//2 - len(menu)//2 + idx
        if idx == selected_opcoes_idx:
            stdscr.attron(BLACK_AND_WHITE)
            stdscr.addstr(y, x, opcoes)
            stdscr.attroff(BLACK_AND_WHITE)
        else: 
            stdscr.addstr(y, x, opcoes)

    stdscr.refresh()

def print_menu_cores2(stdscr, selected_opcoes_idx):
    menu = ['amarelo e roxo', 'verde e rosa']    

    stdscr.clear()

    curses.init_pair(1, curses.COLOR_BLACK, curses.COLOR_WHITE)
    BLACK_AND_WHITE = curses.color_pair(1)
   
    h, w = stdscr.getmaxyx()

    for idx, opcoes in enumerate(menu):
        x = w//2 - len(opcoes)//2
        y = h//2 - len(menu)//2 + idx
        if idx == selected_opcoes_idx:
            stdscr.attron(BLACK_AND_WHITE)
            stdscr.addstr(y, x, opcoes)
            stdscr.attroff(BLACK_AND_WHITE)
        else: 
            stdscr.addstr(y, x, opcoes)

    stdscr.refresh()

######## MAPA 1 ###########

def draw_room_map1(stdscr, cor_room, cor_wall):
    numero_salas = 7

    dimensoes_salas = [
        [8,16], #[y,x]
        [9,13],
        [10,15], 
        [6,30],
        [15,15],
        [8,23],
        [8,24] 
    ]

    coordenadas_salas = [
        [3,5], 
        [22,35],
        [19,5], 
        [3,65],
        [13,110],
        [9,30],
        [18,68] 
    ]

    for i in range(numero_salas):
        altura = dimensoes_salas[i][0]
        comprimento = dimensoes_salas[i][1]
        y = coordenadas_salas[i][0]
        x = coordenadas_salas[i][1]

    
        for i in range(y, y + altura):
            stdscr.attron(cor_room)
            stdscr.addstr(i, x, '.' * comprimento)
            stdscr.attroff(cor_room)
        
        stdscr.attron(cor_wall)
        window = stdscr.subwin(altura, comprimento, y, x)
        window.border()
        stdscr.attroff(cor_wall)

def draw_corr_map1(stdscr, cor_hallway):
    dimensoes_vertical = [
            (7), 
            (3), 
            (4), 
            (9),
            (2), 
            (4), 
            (4),
            (2),
            (7), 
            (3), 
        ]

    coordenadas_vertical = [
        [10,6],
        [17,18],
        [28,6],
        [23,27],
        [29,78],
        [26,124],
        [10,111],
        [8,105],
        [4,30],
        [16,69]
    ]

    dimensoes_horizontal = [
        (12),
        (20),
        (11), 
        (33), 
        (45),
        (6),
        (13), 
        (38), 
        (19), 
    ]

    coordenadas_horizontal = [
        [16,7],
        [31,7],
        [22,27],
        [30,45],
        [29,79],
        [10,105],
        [8,92],
        [3,30],
        [16,50]
    ]
    
    for j in range(len(coordenadas_vertical)):

        vertical = dimensoes_vertical[j]
        y_vertical = coordenadas_vertical[j][0]
        x_vertical = coordenadas_vertical[j][1]

        for i in range(y_vertical, y_vertical + vertical):
            stdscr.attron(cor_hallway)
            stdscr.addstr(i,x_vertical, ".")
            stdscr.attroff(cor_hallway)
        
    for k in range(len(coordenadas_horizontal)):

        horizontal = dimensoes_horizontal[k]
        y_horizontal = coordenadas_horizontal[k][0]
        x_horizontal = coordenadas_horizontal[k][1]

        for i in range(x_horizontal, x_horizontal+horizontal):
            stdscr.attron(cor_hallway)
            stdscr.addstr(y_horizontal,i, ".")
            stdscr.attroff(cor_hallway)

def coletaveis1(stdscr):
    colet1 = [[11,21],[29,20], [13,125], [9,65], [17,30], [31,35], [26,92]]
    for i in range(len(colet1)):
        stdscr.addch(colet1[i][0], colet1[i][1], curses.ACS_DIAMOND)
####### MAPA 2 ########

'''
def draw_map2(stdscr):

    draw_room_map2(stdscr)
    stdscr.refresh()
    draw_corr_map2(stdscr)
    stdscr.refresh()
'''
def draw_room_map2(stdscr, cor_room, cor_wall):

    numero_salas = 5

    dimensoes_salas = [
        [8,16], #[y,x]
        [10,15],
        [6,30],
        [15,15],
        [8,24]
    ]

    coordenadas_salas = [
        [4,10], 
        [19,10], 
        [3,65],
        [13,110],
        [20,50]
        
    ]

    for i in range(numero_salas):

        altura = dimensoes_salas[i][0]
        comprimento = dimensoes_salas[i][1]
        y = coordenadas_salas[i][0]
        x = coordenadas_salas[i][1]


        for i in range(y, y + altura):
            stdscr.attron(cor_room)
            stdscr.addstr(i, x, '.' * comprimento)
            stdscr.attroff(cor_room)

        
        stdscr.attron(cor_wall)
        window = stdscr.subwin(altura, comprimento, y, x)
        window.border()
        stdscr.attroff(cor_wall)

def draw_corr_map2(stdscr, cor_hallway):
    dimensoes_vertical = [
    (8), 
    (4), 
    (10),
    (4), 
    (4), 
    (5),
    (2),
    (5), 
    (5),
    ]

    coordenadas_vertical = [
        [9,6],
        [16,18],
        [22,27],
        [28,12],
        [26,124],
        [10,111],
        [8,105],
        [4,30],
        [25,79]
    ]

    dimensoes_horizontal = [
        (12),
        (15),
        (24), 
        (5),
        (6), 
        (45),
        (6),
        (13), 
        (38), 
        (7), 
    ]

    coordenadas_horizontal = [
        [16,7],
        [31,13],
        [22,27],
        [9,7], #
        [8,25], #
        [29,79],
        [10,105],
        [8,92],
        [3,30],
        [24,73],
    ]
    for j in range(len(coordenadas_vertical)):

        vertical = dimensoes_vertical[j]
        y_vertical = coordenadas_vertical[j][0]
        x_vertical = coordenadas_vertical[j][1]

        for i in range(y_vertical, y_vertical + vertical):
            stdscr.attron(cor_hallway)
            stdscr.addstr(i,x_vertical, ".")
            stdscr.attroff(cor_hallway)
        
        
    for k in range(len(coordenadas_horizontal)):

        horizontal = dimensoes_horizontal[k]
        y_horizontal = coordenadas_horizontal[k][0]
        x_horizontal = coordenadas_horizontal[k][1]

        for i in range(x_horizontal, x_horizontal + horizontal):
            stdscr.attron(cor_hallway)
            stdscr.addstr(y_horizontal,i, ".")
            stdscr.attroff(cor_hallway)

#### MODO FACIL NAS CORES BRANCO E CINZA #############
def facil_cor1(stdscr, player_origin, enemies):
    curses.curs_set(0)
    #stdscr.nodelay(1)

    player_y = player_origin[0]
    player_x = player_origin[1]
    player_direction = player_origin[2]
    
    win_y, win_x = stdscr.getmaxyx()
    ##### cores #####
    if curses.has_colors():
        curses.use_default_colors()
        if curses.can_change_color():
            curses.init_color(
                255,
                0x1c * 1000 // 0xff,
                0x1c * 1000 // 0xff,
                0x1c * 1000 // 0xff
            )


    curses.init_pair(8, 254, 254)
    WHITE = curses.color_pair(8)

    curses.init_pair(9, 243, 243)
    GREY = curses.color_pair(9)

    
    stdscr.refresh()
    colet2 = [[5, 11], [27, 23], [14,123], [7,66], [26,51]]
    key = 0
    
    while 1:

        draw_room_map2(stdscr, GREY, WHITE)
        draw_corr_map2(stdscr, GREY)
        get_enemies(stdscr, enemies)

        
        for i in range(len(colet2)):
            stdscr.addch(colet2[i][0], colet2[i][1], curses.ACS_DIAMOND)
        player_draw_sprite(stdscr, player_y, player_x, player_direction)

        key = stdscr.getkey()

        if key != 0:
            if key == "q":
                sys.exit()
            stdscr.erase()
            draw_room_map2(stdscr, GREY, WHITE)
            draw_corr_map2(stdscr, GREY)
            # COLETAVEIS
            
            for i in range(len(colet2)):
                stdscr.addch(colet2[i][0], colet2[i][1], curses.ACS_DIAMOND)
            
            player_origin = player_walk(key, player_x, player_y,player_direction, win_x, win_y)
            player_y = player_origin[0]
            player_x = player_origin[1]
            player_direction = player_origin[2]
            player_draw_sprite(stdscr, player_y, player_x, player_direction)

            if key == "z":
                use_coord = player_use(stdscr, player_y, player_x,player_direction)
                if use_coord in colet2:
                    colet2.remove(use_coord)
                
            if colet2 == []:
                you_won(stdscr)
        
        if enemy_att_turn(enemies, player_y, player_x) == True:
            game_over(stdscr)

        stdscr.addstr(win_y - 1,0, str(colet2))
        stdscr.refresh()


### MODO MDIFICIL NAS CORES CIANO E LILAS

def facil_cor2(stdscr, player_origin, enemies):
    curses.curs_set(0)
    #stdscr.nodelay(1)

    player_y = player_origin[0]
    player_x = player_origin[1]
    player_direction = player_origin[2]
    
    win_y, win_x = stdscr.getmaxyx()
    ##### cores #####
    if curses.has_colors():
        curses.use_default_colors()
        if curses.can_change_color():
            curses.init_color(
                255,
                0x1c * 1000 // 0xff,
                0x1c * 1000 // 0xff,
                0x1c * 1000 // 0xff
            )



    curses.init_pair(10, 250, 250)
    WHITE = curses.color_pair(10)

    curses.init_pair(11, 103, 103)
    BLUE = curses.color_pair(11)

    curses.init_pair(19, 250, 103)
    WHITE_AND_BLUE = curses.color_pair(19)

    
    stdscr.refresh()
    colet2 = [[5, 11], [27, 23], [14,123], [7,66], [26,51]]
    key = 0
    while 1:

        draw_room_map2(stdscr, BLUE, WHITE)
        draw_corr_map2(stdscr, BLUE)
        get_enemies(stdscr, enemies)
        
        for i in range(len(colet2)):
            stdscr.addch(colet2[i][0], colet2[i][1], curses.ACS_DIAMOND)
        player_draw_sprite(stdscr, player_y, player_x, player_direction)

        key = stdscr.getkey()

        if key != 0:
            if key == "q":
                sys.exit()
            stdscr.erase()
            draw_room_map2(stdscr, BLUE, WHITE)
            draw_corr_map2(stdscr, BLUE)
            # COLETAVEIS
            
            for i in range(len(colet2)):
                stdscr.addch(colet2[i][0], colet2[i][1], curses.ACS_DIAMOND)
            
            player_origin = player_walk(key, player_x, player_y,player_direction, win_x, win_y)
            player_y = player_origin[0]
            player_x = player_origin[1]
            player_direction = player_origin[2]
            player_draw_sprite(stdscr, player_y, player_x, player_direction)

            if key == "z":
                use_coord = player_use(stdscr, player_y, player_x,player_direction)
                if use_coord in colet2:
                    colet2.remove(use_coord)
                
            if colet2 == []:
                you_won(stdscr)

        if enemy_att_turn(enemies, player_y, player_x) == True:
            game_over(stdscr)

        stdscr.addstr(win_y - 1,0, str(colet2))
        stdscr.refresh()
### MODO DIFICIL NAS CORES AMARELO E ROXO

    
def dificil_cor1(stdscr, player_origin, enemies):
    curses.curs_set(0)
    #stdscr.nodelay(1)

    player_y = player_origin[0]
    player_x = player_origin[1]
    player_direction = player_origin[2]
    
    win_y, win_x = stdscr.getmaxyx()
    ##### cores #####
    if curses.has_colors():
        curses.use_default_colors()
        if curses.can_change_color():
            curses.init_color(
                255,
                0x1c * 1000 // 0xff,
                0x1c * 1000 // 0xff,
                0x1c * 1000 // 0xff
            )


    curses.init_pair(12, curses.COLOR_YELLOW, curses.COLOR_YELLOW)
    YELLOW = curses.color_pair(12)

    curses.init_pair(13, curses.COLOR_MAGENTA, curses.COLOR_MAGENTA)
    MAGENTA = curses.color_pair(13)

    curses.init_pair(16, curses.COLOR_MAGENTA, curses.COLOR_YELLOW)
    MAGENTA_AND_YELLOW = curses.color_pair(16)

    
    stdscr.refresh()
    # COLETAVEIS
    colet1 = [[9,19],[26,18], [16,123], [7,67], [15,32], [29,37], [24,90]]
    key = 0
    while 1:

        draw_room_map1(stdscr, YELLOW, MAGENTA)
        draw_corr_map1(stdscr, YELLOW)
        get_enemies(stdscr, enemies)

        
        for i in range(len(colet1)):
            stdscr.addch(colet1[i][0], colet1[i][1], curses.ACS_DIAMOND)
        player_draw_sprite(stdscr, player_y, player_x, player_direction)

        key = stdscr.getkey()

        if key != 0:
            if key == "q":
                sys.exit()
            stdscr.erase()  
            draw_room_map1(stdscr, YELLOW, MAGENTA)
            draw_corr_map1(stdscr, YELLOW)
            # COLETAVEIS
            
            for i in range(len(colet1)):
                stdscr.addch(colet1[i][0], colet1[i][1], curses.ACS_DIAMOND)
            
            player_origin = player_walk(key, player_x, player_y,player_direction, win_x, win_y)
            player_y = player_origin[0]
            player_x = player_origin[1]
            player_direction = player_origin[2]
            player_draw_sprite(stdscr, player_y, player_x, player_direction)

            if key == "z":
                use_coord = player_use(stdscr, player_y, player_x,player_direction)
                if use_coord in colet1:
                    colet1.remove(use_coord)
                
            if colet1 == []:
                you_won(stdscr)
        
        if enemy_att_turn(enemies, player_y, player_x) == True:
            game_over(stdscr)

        stdscr.addstr(win_y - 1,0, str(colet1))
        stdscr.refresh()

### MODO DIFICIL NAS CORES VERDE E ROSA

def dificil_cor2(stdscr, player_origin, enemies):
    curses.curs_set(0)
    #stdscr.nodelay(1)

    player_y = player_origin[0]
    player_x = player_origin[1]
    player_direction = player_origin[2]
    
    win_y, win_x = stdscr.getmaxyx()
    ##### cores #####
    if curses.has_colors():
        curses.use_default_colors()
        if curses.can_change_color():
            curses.init_color(
                255,
                0x1c * 1000 // 0xff,
                0x1c * 1000 // 0xff,
                0x1c * 1000 // 0xff
            )


    curses.init_pair(14, 22, 22)
    VERDE = curses.color_pair(14)

    curses.init_pair(15, 96, 96)
    ROSA = curses.color_pair(15)

    curses.init_pair(18, 96, 22)
    VERDE_E_ROSA = curses.color_pair(18)
    
    stdscr.refresh()
    # COLETAVEIS
    colet1 = [[9,19],[26,18], [16,123], [7,67], [15,32], [29,37], [24,90]]
    key = 0
    while 1:

        draw_room_map1(stdscr, VERDE, ROSA)
        draw_corr_map1(stdscr, VERDE)
        get_enemies(stdscr, enemies)
        
        for i in range(len(colet1)):
            stdscr.addch(colet1[i][0], colet1[i][1], curses.ACS_DIAMOND)
        player_draw_sprite(stdscr, player_y, player_x, player_direction)

        key = stdscr.getkey()

        if key != 0:
            if key == "q":
                sys.exit()
            stdscr.erase()  
            draw_room_map1(stdscr, VERDE, ROSA)
            draw_corr_map1(stdscr, VERDE)
            # COLETAVEIS
            
            for i in range(len(colet1)):
                stdscr.addch(colet1[i][0], colet1[i][1], curses.ACS_DIAMOND)
            
            player_origin = player_walk(key, player_x, player_y,player_direction, win_x, win_y)
            player_y = player_origin[0]
            player_x = player_origin[1]
            player_direction = player_origin[2]
            player_draw_sprite(stdscr, player_y, player_x, player_direction)

            if key == "z":
                use_coord = player_use(stdscr, player_y, player_x,player_direction)
                if use_coord in colet1:
                    colet1.remove(use_coord)
                
            if colet1 == []:
                you_won(stdscr)

        if enemy_att_turn(enemies, player_y, player_x) == True:
            game_over(stdscr)

        stdscr.addstr(win_y - 1,0, str(colet1))
        stdscr.refresh()
### PLAYER ###
def player_walk(key, origin_x, origin_y, direction,  window_x, window_y):
    if key == "KEY_LEFT" and  0 != origin_x - 1:
        origin_x -= 1
        direction = "left"
        return [origin_y, origin_x, direction]
    elif key == "KEY_RIGHT" and  window_x != origin_x + 2:
        origin_x += 1
        direction = "right"
        return [origin_y, origin_x, direction]
    elif key == "KEY_UP" and  0 != origin_y - 1:
        origin_y -= 1
        direction = "up"
        return [origin_y, origin_x, direction]
    elif key == "KEY_DOWN" and  window_y != origin_y + 2:
        origin_y += 1
        direction = "down"
        return [origin_y, origin_x, direction]
    else:
        return [origin_y, origin_x, direction]

def player_draw_sprite(win, origin_y, origin_x, direction):
    switcher = {
        "up":"^",
        "down":"v",
        "left": "<",
        "right": ">"
            }
    curr_sprite = switcher.get(direction, "invalid direction error")
    win.addstr(origin_y, origin_x, curr_sprite)

def player_use(win, origin_y, origin_x, direction,):
    switcher_ver = {
        "up": int(origin_y - 1),
        "down": int(origin_y + 1)
            }
    switcher_hor = {
        "left": int(origin_x - 1),
        "right": int(origin_x + 1)
    }
    coord_y = switcher_ver.get(direction, - 1)
    coord_x = switcher_hor.get(direction, - 1)

    visualized_vertical = win.inch(coord_y, int(origin_x))
    visualized_horizontal = win.inch(int(origin_y) ,coord_x)

    if (visualized_horizontal == curses.ACS_DIAMOND):
        return [int(origin_y) ,coord_x]
    elif (visualized_vertical == curses.ACS_DIAMOND):
        return [coord_y, int(origin_x)]
    else:
        return None
##############

### ENEMIES ###
def enemy_attack(enemy_y, enemy_x, player_y, player_x):
    for i in range(enemy_y - 1, enemy_y + 2):
            for j in range(enemy_x - 1, enemy_y + 2):
                if [player_y, player_x] == [i, j]:
                    return True
                else:
                    continue


def get_enemies(win, enemy_list):
    for enemy in enemy_list:
        enemy_y = enemy[0]
        enemy_x = enemy[1]
        win.addstr(enemy_y, enemy_x, "@")
            

def enemy_att_turn(enemy_list,player_y, player_x):
    for enemy in enemy_list:
        if enemy_attack(enemy[0], enemy[1], player_y, player_x) == True:
                return True
###############

##### MAIN ##########
def main1(stdscr):

    ENEMY_1 = [5, 7]
    ENEMY_2 = [21, 8]
    ENEMY_4 = [16, 116]
    ENEMY_5 = [23, 82]
    ENEMIES_M1 = [ENEMY_1,ENEMY_2,ENEMY_4,ENEMY_5]

    ENEMY_A = [25, 51]
    ENEMY_B = [23, 21]
    ENEMY_C = [8, 11]
    ENEMIES_M2 = [ENEMY_A,ENEMY_B,ENEMY_C]

    player_y = 0
    player_x = 0
    player_direction = "up"
    player_origin = [player_y, player_x, player_direction]

    stdscr.clear()
    curses.curs_set(0)

    splash_screen(stdscr)
    curses.napms(2000)
    stdscr.clear()
    stdscr.refresh()

    Y_MAX, X_MAX = stdscr.getmaxyx()
    texto = 'CUSTOMIZAR'
    y_max = Y_MAX//2
    x_max = X_MAX//2-len(texto)

    ##### cores #####
    if curses.has_colors():
        curses.use_default_colors()
        if curses.can_change_color():
            curses.init_color(
                255,
                0x1c * 1000 // 0xff,
                0x1c * 1000 // 0xff,
                0x1c * 1000 // 0xff
            )

    menu = [ 'facil','dificil', 'instrucoes']

    opcaoAtual_opcoes_idx = 0
    
    key = 0
    while 1:
        print_menu(stdscr, opcaoAtual_opcoes_idx)
        key = stdscr.getch()

        stdscr.clear()

        if key == curses.KEY_UP and opcaoAtual_opcoes_idx > 0:
            opcaoAtual_opcoes_idx -= 1
        elif key == curses.KEY_DOWN and opcaoAtual_opcoes_idx < len(menu)-1:
            opcaoAtual_opcoes_idx += 1
        elif key == curses.KEY_ENTER or key in [10, 13]:
            if opcaoAtual_opcoes_idx == len(menu)-3:
            
                menu = ['verao', 'primavera']

                opcaoAtual_opcoes_idx = 0
                
                key = 0
                while 1: 
                    print_menu_cores(stdscr, opcaoAtual_opcoes_idx)
                    stdscr.addstr(y_max-3, x_max+5, texto)

                    key = stdscr.getch()

                    stdscr.clear()

                    if key == curses.KEY_UP and opcaoAtual_opcoes_idx > 0:
                        opcaoAtual_opcoes_idx -= 1
                    elif key == curses.KEY_DOWN and opcaoAtual_opcoes_idx < len(menu)-1:
                        opcaoAtual_opcoes_idx += 1
                    elif key == curses.KEY_ENTER or key in [10, 13]:

                        if opcaoAtual_opcoes_idx == len(menu)-2:
                            stdscr.clear()
                            while 1:
                                stdscr.refresh()
                                facil_cor1(stdscr, player_origin, ENEMIES_M2)
                        if opcaoAtual_opcoes_idx == len(menu)-1:
                            stdscr.clear()
                        while 1:
                                stdscr.refresh()
                                facil_cor2(stdscr, player_origin, ENEMIES_M2)
                    print_menu_cores(stdscr, opcaoAtual_opcoes_idx)

                    stdscr.refresh()
                
            if opcaoAtual_opcoes_idx == len(menu)-2:
                menu = ['outono', 'inverno']

                opcaoAtual_opcoes_idx = 0
                
                key = 0
                while 1: 
                    print_menu_cores2(stdscr, opcaoAtual_opcoes_idx)
                    stdscr.addstr(y_max-3, x_max+5, texto)
                    key = stdscr.getch()

                    stdscr.clear()

                    if key == curses.KEY_UP and opcaoAtual_opcoes_idx > 0:
                        opcaoAtual_opcoes_idx -= 1
                    elif key == curses.KEY_DOWN and opcaoAtual_opcoes_idx < len(menu)-1:
                        opcaoAtual_opcoes_idx += 1
                    elif key == curses.KEY_ENTER or key in [10, 13]:
                        if opcaoAtual_opcoes_idx == len(menu)-2:
                            stdscr.clear()
                            while 1:
                                stdscr.refresh()
                                dificil_cor1(stdscr, player_origin, ENEMIES_M1)
                        if opcaoAtual_opcoes_idx == len(menu)-1:
                            stdscr.clear()
                            while 1:
                                stdscr.refresh()
                                dificil_cor2(stdscr, player_origin, ENEMIES_M1)
                    print_menu_cores2(stdscr, opcaoAtual_opcoes_idx)

                    stdscr.refresh()
            if opcaoAtual_opcoes_idx == len(menu)-1:
                break

        print_menu(stdscr, opcaoAtual_opcoes_idx)
        stdscr.refresh()


if __name__ == "__main__":
    curses.wrapper(main1)   
